#include <iostream>
#include <memory>

struct node {
    int x;
    std::shared_ptr <node> next;
    node(int new_x = 0):
        x(new_x),
        next(nullptr)
    {}
};

class mylist {
    std::shared_ptr <node> mbegin, mend;

public:

    std::shared_ptr <node>& begin() {
        return mbegin;
    }

    std::shared_ptr <node>& end() {
        return mend;
    }

    mylist():
        mbegin(new node()),
        mend(mbegin)
    {}

    void push_back(int x) {
        mend->x = x;
        mend->next = std::shared_ptr <node>(new node());
        mend = mend->next;
    }
};

void mysort(auto mbegin, auto mend) {
    if (mbegin == mend || mbegin->next == mend)
        return;

    int n = 0;
    auto itcnt = mbegin;
    while (itcnt != mend) {
        itcnt = itcnt->next;
        n++;
    }

    auto itm = mbegin;
    for (int i = 0; i < n / 2; ++i)
        itm = itm->next;

    mysort(mbegin, itm);
    mysort(itm, mend);

    auto it = mbegin, it2 = itm;
    mylist l;
    while (it != itm && it2 != mend) {
        if (it->x < it2->x) {
            l.push_back(it->x);
            it = it->next;
        }
        else {
            l.push_back(it2->x);
            it2 = it2->next;
        }
    }
    while (it != itm) {
        l.push_back(it->x);
        it = it->next;
    }
    while (it2 != mend) {
        l.push_back(it2->x);
        it2 = it2->next;
    }

    it = mbegin;
    auto itl = l.begin();
    while (it != mend) {
        it->x = itl->x;
        itl = itl->next;
        it = it->next;
    }
}

int main() {
    int n;
    mylist l;
    std::cin >> n;
    for (int i = 0; i < n; ++i) {
        int x;
        std::cin >> x;
        l.push_back(x);
    }

    mysort(l.begin(), l.end());

    std::shared_ptr <node> it = l.begin();
    while (it != l.end()) {
        std::cout << it->x << ' ';
        it = it->next;
    }
}
